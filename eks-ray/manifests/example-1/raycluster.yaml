apiVersion: ray.io/v1
kind: RayCluster
metadata:
  annotations:
    ray.io/ft-enabled: "true" # enable Ray GCS FT
    # In most cases, you don't need to set `ray.io/external-storage-namespace` because KubeRay will
    # automatically set it to the UID of RayCluster. Only modify this annotation if you fully understand
    # the behaviors of the Ray GCS FT and RayService to avoid misconfiguration.
    # [Example]:
    # ray.io/external-storage-namespace: "my-raycluster-storage"
  name: raycluster-external-gcs
spec:
  rayVersion: '2.7.0'
  headGroupSpec:
    # The `rayStartParams` are used to configure the `ray start` command.
    # See https://github.com/ray-project/kuberay/blob/master/docs/guidance/rayStartParams.md for the default settings of `rayStartParams` in KubeRay.
    # See https://docs.ray.io/en/latest/cluster/cli.html#ray-start for all available options in `rayStartParams`.
    rayStartParams:
      # Setting "num-cpus: 0" to avoid any Ray actors or tasks being scheduled on the Ray head Pod.
      num-cpus: "0"
      # redis-password should match "requirepass" in redis.conf in the ConfigMap above.
      # Ray 2.3.0 changes the default redis password from "5241590000000000" to "".
      redis-password: $REDIS_PASSWORD
    # Pod template
    template:
      spec:
        containers:
          - name: ray-head
            image: rayproject/ray:2.7.0
            resources:
              limits:
                cpu: "1"
              requests:
                cpu: "1"
            # Keep this preStop hook in each Ray container config.
            lifecycle:
              preStop:
                exec:
                  command: ["/bin/sh","-c","ray stop"]
            env:
              # Ray will read the RAY_REDIS_ADDRESS environment variable to establish
              # a connection with the Redis server. In this instance, we use the "redis"
              # Kubernetes ClusterIP service name, also created by this YAML, as the
              # connection point to the Redis server.
              - name: RAY_REDIS_ADDRESS
                value: redis:6379
              # This environment variable is used in the `rayStartParams` above.
              - name: REDIS_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: redis-password-secret
                    key: password
              # needed to display grafana graphs in ray dash as per 
              # https://docs.ray.io/en/latest/cluster/configure-manage-dashboard.html#embedding-grafana-visualizations-into-ray-dashboard
              - name: RAY_GRAFANA_IFRAME_HOST
                value: http://127.0.0.1:3000
              - name: RAY_GRAFANA_HOST
                value: http://observability-grafana.observability.svc:80
              - name: RAY_PROMETHEUS_HOST
                value: http://observability-kube-prometh-prometheus.observability.svc:9090
            ports:
              - containerPort: 6379
                name: redis
              - containerPort: 8265
                name: dashboard
              - containerPort: 10001
                name: client
            volumeMounts:
              - mountPath: /tmp/ray
                name: ray-logs
        volumes:
          - name: ray-logs
            emptyDir: {}
  workerGroupSpecs:
    # the pod replicas in this group typed worker
    - groupName: small-group
      replicas: 1
      minReplicas: 1
      maxReplicas: 10
      # The `rayStartParams` are used to configure the `ray start` command.
      # See https://github.com/ray-project/kuberay/blob/master/docs/guidance/rayStartParams.md for the default settings of `rayStartParams` in KubeRay.
      # See https://docs.ray.io/en/latest/cluster/cli.html#ray-start for all available options in `rayStartParams`.
      rayStartParams: {}
      # Pod template
      template:
        spec:
          containers:
            - name: ray-worker
              image: rayproject/ray:2.7.0
              volumeMounts:
                - mountPath: /tmp/ray
                  name: ray-logs
              resources:
                limits:
                  cpu: "1"
                requests:
                  cpu: "1"
              # Keep this preStop hook in each Ray container config.
              lifecycle:
                preStop:
                  exec:
                    command: ["/bin/sh","-c","ray stop"]
          volumes:
            - name: ray-logs
              emptyDir: {}